---
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";

import Layout from "@layouts/layout.astro";
import { getAllPosts, type Blog } from "../../library/microcms";
import BlogList from "@components/BlogList.astro";
import BackButton from "@components/BackButton.astro";
import ArrowForward from "@components/ArrowForward.astro";
import ArrowNext from "@components/ArrowNext.astro";

export const prerender = true;

dayjs.extend(utc);
dayjs.extend(timezone);

// 詳細記事ページの全パスを取得
export async function getStaticPaths({}) {
  const blogs = await getAllPosts();
  const contents = blogs.contents;
  return contents.map((content) => ({
    params: {
      // []内に入れる変数を指定
      slug: content.slug + "-" + content.id,
      // page: content.slug,
    },
    props: { content },
  }));
}
interface Props {
  content: Blog;
}
const { content } = Astro.props;

const eyecatchHeight = content.eyecatch.height;
const eyecatchWidth = content.eyecatch.width;

const articles = content.article;

// ブログ記事内の画像サイズを取得
let imageHeight: number = 0;
let imageWidth: number = 0;
articles.forEach(
  (article) =>
    article.image &&
    (imageHeight = article.image.height, imageWidth = article.image.width)
);

// 日付の表示を変更
const pubDate = dayjs
  .utc(content.publishedAt)
  .tz("Asia/Tokyo")
  .format("YYYY.MM.DD");

// pagination
// 記事の詳細情報を取得
const blogs = await getAllPosts();
const contents: Blog[] = blogs.contents;
// slugの一覧を取得
const slugs = contents.map((content) => {
  return content.slug + "-" + content.id;
});

// 現在のページのslugIDを取得
const currentSlugId = slugs.findIndex(
  (slug) => slug === `${content.slug}-${content.id}`
);
// 前のページと次のページのslugを取得
const nextSlug = `/blog/${slugs[currentSlugId + 1]}`;
const prevSlug = `/blog/${slugs[currentSlugId - 1]}`;

// 最近の投稿を取得
const posts = await getAllPosts(5);
---

<Layout pageTitle="ブログ記事">
  <main>
    <section class="blog">
      <div class="container">
        <p class="publishedAt">{pubDate}</p>
        <h1 class="title">{content.title}</h1>
        <div class="image">
          <img
            class="eyecatchImg"
            src={content.eyecatch.url}
            alt=""
            height={content.eyecatch.height}
            width={content.eyecatch.width}
          />
        </div>
        <article>
          {
            articles.map((article) => {
              switch (article.fieldId) {
                case "rich_editor":
                  return <div class="setHtml" set:html={article.rich_editor} />;
                case "image":
                  return (
                    <div class="image">
                      <img
                        class="articleImg"
                        src={article.image.url}
                        alt=""
                        height={article.image.height}
                        width={article.image.width}
                      />
                    </div>
                  );
                case "text":
                  return <p>{article.text}</p>;
                default:
                  break;
              }
            })
          }
          <div class="paginate">
            {
              prevSlug === "/blog/undefined" ? (
                <div class="blank" />
              ) : (
                <ArrowForward
                  prev={prevSlug}
                  word="新しい記事へ"
                  width="14rem"
                />
              )
            }
            {
              nextSlug === "/blog/undefined" ? (
                <div class="blank" />
              ) : (
                <ArrowNext next={nextSlug} word="古い記事へ" width="14rem" />
              )
            }
          </div>
        </article>
        <BackButton
          href="/blogs/1"
          ,
          label="一覧に戻る"
          ,
          width="130px"
          ,
          fontSize="1.8rem"
          ,
        />
      </div>
      <aside>
        <div class="blog-list">
          <h3>最近の投稿</h3>
          {
            posts.contents.map((post) => (
              <BlogList
                id={post.id}
                slug={post.slug}
                src={post.eyecatch.url}
                date={post.publishedAt}
                title={post.title}
                summary={post.summary}
              />
            ))
          }
        </div>
      </aside>
    </section>
  </main>
</Layout>

<style
  define:vars={{
    eyecatchHeight,
    eyecatchWidth,
    imageWidth,
    imageHeight,
  }}
>
  .container {
    height: auto;
    max-width: 640px;
    padding-inline: 1.6rem;
    padding-block: 4rem;
    margin-inline: auto;
  }

  article {
    margin-bottom: 64px;
  }
  .publishedAt {
    font-size: 1.4rem;
    padding: 0;
  }

  .title {
    padding: 0 0 1.6rem 0;
  }

  .image {
    margin: 0 0 1.6rem 0;
  }

  img {
    max-width: 100%;
    /* aspect-ratio: auto; */
  }
  .eyecatchImg {
    width: var(--eyecatchWidth);
    height: var(--eyecatchHeight);
  }

  .articleImg {
    width: var(--imageWidth);
    height: var(--imageHeight);
  }

  aside {
    display: none;
  }

  main a {
    padding: 0.8rem;
    text-align: center;
  }

  .paginate {
    margin-top: 64px;
    display: flex;
    flex-direction: row;
    justify-content: center;
    gap: 15%;
  }

  .paginate a {
    padding: 0;
    text-decoration: none;
    font-size: 16px;
    color: var(--textBlack);
  }
  .paginate a:hover {
    border-bottom: 1px solid var(--textGray);
  }
  .blank {
    width: 14rem;
  }

  @media screen and (945px <= width) {
    section {
      display: flex;
      flex-direction: row;
      max-width: 900px;
      margin: 4rem auto;
    }
    .container {
      width: 568px;
    }
    aside {
      display: block;
      min-width: 252px;
    }
    h3 {
      font-size: 2rem;
    }
    .blog-list {
      display: flex;
      flex-direction: column;
      gap: 2.4rem;
      /* position: sticky; */
      top: 200px;
    }
  }
</style>

<style is:global>
  .setHtml p {
    line-height: 3rem;
    padding-bottom: 4rem;
  }
</style>
