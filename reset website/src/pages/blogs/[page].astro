---
import type { GetStaticPathsOptions } from "astro";
import Layout from "@layouts/layout.astro";
import BlogSummary from "@components/BlogSummary.astro";
// microCMSを呼び出す
import { getBlogs, getAllPosts } from "../../../src/library/microcms";

// const response = await getBlogs({ fields: ["slug", "title"] });

export const prerender = true;
export const getStaticPaths = async ({ paginate }: GetStaticPathsOptions) => {
  const blogs = await getBlogs({ limit: 100 });
  return paginate(blogs.contents, { pageSize: 2 });
};
const { page } = Astro.props;
console.log(page);

const posts = await getAllPosts();
---

<Layout title="ブログ一覧">
  <main>
    <section class="blogs">
      <h2>ブログ</h2>
      <div class="container">
        {
          page.data.map((page) => (
            <BlogSummary
              id={page.id}
              slug={page.slug}
              src={page.eyecatch.url}
              date={page.publishedAt}
              title={page.title}
              summary={page.summary}
            />
          ))
        }
      </div>

      <nav class="pagination">
        <ul>
          <!-- 前Pが存在する場合、前へリンクを表示 -->
          {
            page.url.prev ? (
              <li class="arrow">
                <a href={page.url.prev}  >前へ</a>
              </li>
            ) : (
              <li />
            )
          }

          <!--前々頁が存在する場合は 先頭の頁と...を表示-->
          {
            page.currentPage > 2 ? (
                <li>
                  <a href="/blogs/1">1</a>
                </li>
                <li>...</li>
            ) : (
              <li />
            )
          }

          <!-- 前頁が存在する場合、前頁Noを表示 -->
          {
            page.url.prev ? (
              <li>
                <a href={page.url.prev}>{page.currentPage - 1}</a>
              </li>
            ) : (
              <li />
            )
          }

          <!-- 現在の頁 -->
          <li class="currentPage">{page.currentPage}</li>

          <!-- 次頁が存在する場合、次頁Noを表示 -->
          {
            page.url.next ? (
              <li>
                <a href={page.url.next}>{page.currentPage + 1}</a>
              </li>
            ) : (
              <li />
            )
          }

          <!--次々頁が存在する場合は 最後の頁と...を表示-->
          <!-- {
            page.currentPage < page.lastPage ? (
            <li>...</li>
            <li>
              <a href={page.url.next}>
                {page.lastPage}
              </a>
            </li>
          ):(
            <li />
          )
          } -->

          {
            ( page.currentPage +1 < page.lastPage ) ? (
              <li>...</li>
              <li>
              <a href={page.lastPage}>
                  {page.lastPage}
                  </a>
                  </li>
                  ) : (
              <li>
              </li>
            )
          }

          <!-- 次頁が存在する場合、次へリンクを表示 -->
          {
            page.url.next ? (
              <li>
                <a href={page.url.next}>次へ</a>
              </li>
            ) : (
              <li />
            )
          }
        </ul>
      </nav>
    </section>
  </main>
</Layout>

<style>
  section {
    max-width: 900px;
    margin: 4rem auto;
  }

  h2 {
    text-align: center;
  }

  .container {
    margin-block: 8rem;
    display: flex;
    flex-direction: column;
    gap: 4rem;
  }

  .pagination {
    max-width: 300px;
    margin-inline: auto;
  }
  .pagination ul {
    list-style: none;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    padding: 0;
  }
  .pagination li {
    text-align: center;
    padding: .7rem 0;
    display: inline-block;
    width: 3.6rem;
  }

  .pagination a {
    /* text-align: center; */
    text-decoration: none;
    color: var(--textBlack);
    /* width: 100px; */
  }
  .currentPage {
    color: var(--attention);
    border: 2px solid var(--attention);
    border-radius: .8rem;
    font-weight: bold;
  }

  .arrow {
    width: 100px;
  }
  /* .arrow::before{
    content:"";
    display: inline-block;
    transform: translateY(100%) rotate(135deg);
    width: 8px;
    height: 8px;
    border-bottom: 2px solid var(--attention);
    border-right: 2px solid var(--attention);
  } */
</style>
