---
import type { GetStaticPathsOptions } from "astro";

import BlogList from "@components/BlogList.astro";

import { getBlogs, getAllPosts } from "../../src/library/microcms";
import ButtonBasic from "./ButtonBasic.astro";

const posts = await getAllPosts(4);

---

<section class="blogs">
  <h2>最近のブログ</h2>
  <div class="splide" role="group" aria-label="最近のブログ" id="blogSlider">
    <div class="sliderWrap splide__track">
      <div class="container splide__list">
        {
          posts.map((post) => (
            <BlogList
              id={post.id}
              slug={post.slug}
              src={post.eyecatch.url}
              date={post.publishedAt}
              title={post.title}
              summary={post.summary}
              // class="bloglist splide2__slide"
            />
          ))
        }
      </div>
    </div>
  </div>
  <ButtonBasic
  url = {"location.href='/blogs/1'"},
  text = {"一覧を見る"}
  />
</section>

<style>
  section {
    margin: 4rem auto;
  }
  .blogs {
    opacity: 0;
    transform: translateY(20px);
    transition: 2s;
    padding-block-end: 4rem;
  }

  h2 {
    text-align: center;
  }

  .splide {
    margin-inline: auto;
    max-width: 1260px;
    margin-bottom: 2.4rem;
  }
  .sliderWrap {
    /* scroll-snap-type: x mandatory; */
    overflow-y: hidden;
    margin-inline: auto;

  }

  /* .sliderWrap::-webkit-scrollbar {
    height: 8px;
  }

  .sliderWrap::-webkit-scrollbar-track {
    border-radius: 2px;
  }

  .sliderWrap::-webkit-scrollbar-thumb {
    background-color: var(--bgBottomNav);
    border-radius: 4px;
  } */

  .container {
    /* display: flex; */
    /* flex-direction: row; */
    /* justify-content: space-evenly; */
    /* margin-block-start: 4rem; */
    /* align-items: start; */
    /* width: 1260px; */
    /* height: 300px; */
    /* margin-left: -300px; */
    /* scroll-snap-align: center; */
  }
  /* scroll-snap-align: center;はBlogList.astroのaタグに設定 */
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    class ScrollObserver {
      constructor(els, cb, options) {
        //監視対象のelementsを取得
        this.els = document.querySelectorAll(els);
        //オプションのデフォルト設定を定義
        const defaultOptions = {
          root: null,
          rootMargin: "0px",
          threshold: 0,
        };
        this.cb = cb;
        //デフォルト設定に、個別設定のオプションをマージする
        this.options = Object.assign(defaultOptions, options);
        //
        this._init();
      }
      _init() {
        const callback = (entries) => {
          entries.forEach((entry) => {
            //監視対象の要素が領域内に入った場合の処理
            if (entry.isIntersecting) {
              this.cb(entry.target, true); //true=isIntersectingがtrue
              //処理後に監視を切る処理
              observer.unobserve(entry.target);
            }
          });
        };
        const observer = new IntersectionObserver(
          callback.bind(this),
          this.options
        );
        //対象の要素elを監視
        this.els.forEach((el) => observer.observe(el));
      }
    }

    const fadein = function (el, isIntersecting) {
      if (isIntersecting) {
        el.style.opacity = 1;
        el.style.transform = "none";
      }
    };
    const fadeinTrigger = new ScrollObserver(".blogs", fadein, {
      rootMargin: "-200px 0px",
      threshold: 0,
    });
  });

  import Splide from "@splidejs/splide";
  import "@splidejs/splide/css";

  const options = {
    type: "slide",
    // perPage: 1,
    fixedWidth:"300px",
    height: "340px",
    gap: "20px",
    padding:  { left: '4rem', right: '4rem' },
    focus    : 'center',
    trimSpace: false,
    mediaQuery: "min",
    breakpoints: {
      600: {
        // perPage: 2,
        // width:"700px",
      },
      1000: {
        // pagination: false,
        // perPage: 3,
        // width:"1000px",
      },
      1260: {
        focus    : false,
        trimSpace: true,
        arrows: false,
        padding: 0,
        // perPage: 4,
        // width:"1360px",
        // destroy: true,
      }
    }
  }

  let blogSlider = new Splide("#blogSlider", options);
  blogSlider.mount();

</script>
