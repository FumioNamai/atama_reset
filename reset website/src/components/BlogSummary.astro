---
import type { GetStaticPathsOptions } from "astro";

import BlogList from "@components/BlogList.astro";

import { getBlogs, getAllPosts } from "../../src/library/microcms";

const posts = await getAllPosts(4);

---

<section class="blogs">
  <h2>ブログ</h2>
  <div class="sliderWrap">
  <div class="container">
    {
      posts.map((post) => (
        <BlogList
          id={post.id}
          slug={post.slug}
          src={post.eyecatch.url}
          date={post.publishedAt}
          title={post.title}
          summary={post.summary}
          class="bloglist"
        />
      ))
    }
  </div>
</div>
</section>

<style>
  section {
    margin: 4rem auto;
  }
  .blogs {
    opacity: 0;
    transform: translateY(20px);
    transition: 2s;
    padding-block-end: 4rem;
  }

  h2 {
    text-align: center;
  }

  .sliderWrap {
    overflow-y: hidden;
    max-width:900px;
    scroll-snap-type: x mandatory;
    margin-inline: auto;
  }

  .sliderWrap::-webkit-scrollbar {
    height: 8px;
    /* width: 1000px; */
  }

  .sliderWrap::-webkit-scrollbar-track {
    /* background-color: gray; */
    border-radius: 2px;
  }
  .sliderWrap::-webkit-scrollbar-thumb {
    background-color: var(--bgBottomNav);
    border-radius: 4px;
  }

  .container {
    margin-block-start: 4rem;
    display: flex;
    justify-content:space-evenly;
    align-items: start;
    width: 1600px;
    height: 300px;
    margin-left: -300px;
    scroll-snap-align: center;
    /* scroll-snap-align: center;はBlogList.astroのaタグに設定 */
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    class ScrollObserver {
      constructor(els, cb, options) {
        //監視対象のelementsを取得
        this.els = document.querySelectorAll(els);
        //オプションのデフォルト設定を定義
        const defaultOptions = {
          root: null,
          rootMargin: "0px",
          threshold: 0,
        };
        this.cb = cb;
        //デフォルト設定に、個別設定のオプションをマージする
        this.options = Object.assign(defaultOptions, options);
        //
        this._init();
      }
      _init() {
        const callback = (entries) => {
          entries.forEach((entry) => {
            //監視対象の要素が領域内に入った場合の処理
            if (entry.isIntersecting) {
              this.cb(entry.target, true); //true=isIntersectingがtrue
              //処理後に監視を切る処理
              observer.unobserve(entry.target);
            }
          });
        };
        const observer = new IntersectionObserver(
          callback.bind(this),
          this.options
        );
        //対象の要素elを監視
        this.els.forEach((el) => observer.observe(el));
      }
    }

    const fadein = function (el, isIntersecting) {
      if (isIntersecting) {
        el.style.opacity = 1;
        el.style.transform = "none";
      }
    };
    const fadeinTrigger = new ScrollObserver(".blogs", fadein, {
      rootMargin: "-200px 0px",
      threshold: 0,
    });
  });

</script>
