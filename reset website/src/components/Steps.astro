---
import { Image } from "astro:assets";
import doorOpen from "../assets/door-open.svg";
import writing from "../assets/writing.svg";
import question from "../assets/question.svg";
import wear from "../assets/wear.svg";
import sleeping from "../assets/sleeping.svg";
import smile from "../assets/smile.svg";
import counseling from "../assets/counseling.webp";
import head from "../assets/head.webp";
import refreshing2s from "../assets/refreshing2s.webp";
---

<section class="steps" id="steps">
  <div class="wrapper">
    <h2 class="borderBottom">施術の流れ</h2>

    <div class="step">
      <h3><Image src={doorOpen} alt="" class="icon doorOpen" />ご来店</h3>
      <div class="flex">
        <p></p>
        <div class="image"></div>
      </div>
      <div class="step_line"></div>
    </div>

    <div class="step test">
      <h3>
        <Image src={writing} alt="" class="icon" />カウンセリングシートのご記入
      </h3>
      <div class="flex">
        <div class="text">
          <p>
            初めてのお客様にはカウンセリングシートのご記入をお願い致します。
          </p>
        </div>
        <div class="image">
            <Image src={counseling} alt="" width=320 height=213.5 />
        </div>
      </div>
      <div class="step_line"></div>
    </div>

    <div class="step">
      <h3><Image src={question} alt="" class="icon" />カウンセリング</h3>
      <div class="flex">
        <div class="text">
          <p>
            ご記入いただいたシートをもとにお客様のお身体の状態を確認させていただきます。
          </p>
          <p>
            当日のお客様の状態に合わせた施術内容をご提案させていただきます。
          </p>
          <p>
            ※シートのご記入と施術前後のカウンセリングの時間を含め、<br
            />当日は『コース時間+20分程度』<br />のお時間を頂戴しております。
          </p>
        </div>
      </div>
      <div class="step_line"></div>
    </div>

    <div class="step">
      <h3><Image src={wear} alt="" class="icon" />ご準備</h3>
      <div class="flex">
        <div class="text">
          <p>
            アクセサリー全般・時計・ベルトは取り外しをお願いしております。
          </p>
          <p>
            ご希望のお客様には着替えていただき、ゆったりと施術を受けていただきます。<br
            />お気に入りのリラックス着をお持ちください。
          </p>
        </div>
        <div class="image"></div>
      </div>
      <div class="step_line"></div>
    </div>

    <div class="step">
      <h3><Image src={sleeping} alt="" class="icon" />施術スタート</h3>
      <div class="flex">
        <div class="text">
          <p>
            お客様の症状に合わせた内容で施術をおこないます。
          </p>
          <p>
            完全プライベート空間のゆったりとした時間の中で、日頃のお疲れを癒してくださいませ。
          </p>
        </div>
        <div class="image">
          <Image src={head} alt="" width=320 height=213.5 />
        </div>
      </div>
      <div class="step_line"></div>
    </div>

    <div class="step">
      <h3><Image src={smile} alt="" class="icon" />施術後</h3>
      <div class="flex">
        <div class="text">
          <p>
            施術後には髪の毛やお化粧を整えたり、お着替えをしてお過ごしください。
          </p>
          <p>
            へアブラシや綿棒などはご用意しておりますが、化粧品のご用意はございません。
          </p>
          <p>老廃物の流れを良くするために、こまめな水分補給をお勧めします。</p>
          <p>
            お急ぎのお客様のためにも、ミネラルウォーターをご用意しております。お持ち帰りいただき、こまめな水分補給をおこなってください。
          </p>
        </div>
        <div class="image">
          <Image src={refreshing2s} alt="" width=320 height=213.5 />
        </div>
      </div>
      <span class="dot"></span>
      <div class="step_line"></div>
    </div>
  </div>
</section>

<style>
  .wrapper {
    max-width: 490px;
  }
  .steps {
    margin: 64px auto;
    max-width: 900px;
  }

  .flex {
    display: flex;
    flex-direction: column;
  }

  @media screen and (768px <= width) {
    .flex {
      flex-direction: row;
      justify-content: space-between;
    }

    .wrapper {
      max-width: 900px;
    }
    .text {
      width: 420px;
      min-width: 420px;
      padding-right: 12px;
    }
    .step.test {
      height: 110px;
    }
  }

  /* サイズ調整が必要 */
  .image {
    margin: 0 auto 18px auto;
    width: 320px;
  }
  .step {
    margin-left: 28px;
    padding-left: 12px;
    line-height: 275%;
    letter-spacing: 2px;
    transition: all 2s;
    opacity: 0;
    position: relative;
  }

  .step_line {
    position: absolute;
    display: block;
    content: "";
    top: 36px;
    left: -1px;
    background-color: var(--gray-25);
    width: 2px;
    height: 0%;
    transition: height 5s;
  }

  p {
    padding-bottom: 18px;
  }

  h2 {
    display: inline-block;
    margin-left: 16px;
    margin-bottom: 20px;
    border-bottom: 3px solid var(--positive);
  }

  h3 {
    display: inline-block;
    font-size: 2rem;
    margin-left: -25px;
    padding-block: 4px;
    background-color: var(--bgPrimary);
  }

  .icon {
    display: inline-block;
    margin-bottom: -5px;
    margin-right: 8px;
  }

  .doorOpen {
    margin-bottom: -2px;
  }

  .dot {
    background-color: var(--gray-25);
    width: 10px;
    height: 10px;
    border-radius: 10px;
    color: var(--gray-25);
    position: absolute;
    top: 100%;
    left: -5px;
    opacity: 1;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    class ScrollObserver {
      constructor(els, cb, options) {
        //監視対象のelementsを取得
        this.els = document.querySelectorAll(els);
        //オプションのデフォルト設定を定義
        const defaultOptions = {
          root: null,
          rootMargin: "0px",
          threshold: 0,
        };
        this.cb = cb;
        //デフォルト設定に、個別設定のオプションをマージする
        this.options = Object.assign(defaultOptions, options);
        //
        this._init();
      }
      _init() {
        const callback = (entries) => {
          entries.forEach((entry) => {
            //監視対象の要素が領域内に入った場合の処理
            if (entry.isIntersecting) {
              this.cb(entry.target, true); //true=isIntersectingがtrue
              //処理後に監視を切る処理
              observer.unobserve(entry.target);
            }
          });
        };
        const observer = new IntersectionObserver(
          callback.bind(this),
          this.options
        );
        //対象の要素elを監視
        this.els.forEach((el) => observer.observe(el));
      }
    }
    // const dot = document.querySelector(".dot");
    // console.log(dot);
    const stretch = function (el, isIntersecting) {
      if (isIntersecting) {
        el.style.height = "calc(100% - 36px)";
        // dot.style.opacity = 1;
      }
    };

    const stretchTrigger = new ScrollObserver(".step_line", stretch, {
      rootMargin: "0px 0px",
      threshold: 0.5,
    });

    const fadein = function (el, isIntersecting) {
      if (isIntersecting) {
        el.style.opacity = 1;
      }
    };
    const fadeinTrigger = new ScrollObserver(".step", fadein, {
      rootMargin: "0px 0px",
      threshold: 0.5,
    });
  });
</script>
