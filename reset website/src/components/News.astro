---

---

<section class="news">
  <h2>お知らせ</h2>

  <div class="news-title">
    <!-- <p class="publishedAT">2021.11.21</p> -->
    <a href="">
      <p>～お詫びとお願い～</p>
      <span></span>
    </a>
  </div>
  <div class="news-title">
    <p class="publishedAT">2021.11.21</p>
    <a href="">
      <p>ギフトカードのお取り扱いについて</p>
      <span></span>
    </a>
  </div>
</section>

<style>
  p {
    padding-block: 0.8rem;
  }
  .news {
    opacity: 0;
    transform: translateY(20px);
    transition: 2s;
    margin-block: 2.4rem;
    padding: 2.4rem 1.6rem;
  }
  h2 {
    text-align: center;
    margin-bottom: 2.4rem;
  }
  .news-title {
    margin-inline: auto;
    max-width: 400px;
    border-bottom: 1px solid var(--textBlack);
    margin-bottom: 1.6rem;
  }

  .publishedAT {
    padding-block: 0.4rem;
    margin-left: 1.2rem;
    font-size: 1.4rem;
  }

  a {
    display: flex;
    flex-direction: row;
    text-decoration: none;
    align-items: center;
    justify-content: space-between;
    color: var(--textBlack);
    line-height: 1;
    margin-left: 1.2rem;
  }

  span {
    color: var(--textBlack);
    cursor: pointer;
    display: block;
    transform: rotate(-45deg);
    width: 7px;
    height: 7px;
    margin-right: 1.2rem;
    border-bottom: 1px solid var(--textBlack);
    border-right: 1px solid var(--textBlack);
    content: "";
    transition: transform 0.5s;
  }
</style>

<script>

  document.addEventListener("DOMContentLoaded", function () {
    class ScrollObserver {
      constructor(els, cb, options) {
        //監視対象のelementsを取得
        this.els = document.querySelectorAll(els);
        //オプションのデフォルト設定を定義
        const defaultOptions = {
          root: null,
          rootMargin: "0px",
          threshold: 0,
        };
        this.cb = cb;
        //デフォルト設定に、個別設定のオプションをマージする
        this.options = Object.assign(defaultOptions, options);
        //
        this._init();
      }
      _init() {
        const callback = (entries) => {
          entries.forEach((entry) => {
            //監視対象の要素が領域内に入った場合の処理
            if (entry.isIntersecting) {
              this.cb(entry.target, true); //true=isIntersectingがtrue
              //処理後に監視を切る処理
              observer.unobserve(entry.target);
            }
          });
        };
        const observer = new IntersectionObserver(
          callback.bind(this),
          this.options
        );
        //対象の要素elを監視
        this.els.forEach((el) => observer.observe(el));
      }
    }

    const fadein = function (el, isIntersecting) {
      if (isIntersecting) {
        el.style.opacity = 1;
        el.style.transform = "none";
      }
    };
    const fadeinTrigger = new ScrollObserver(".news", fadein, {
      rootMargin: "-100px 0px",
      threshold: 0,
    });
  });
</script>
