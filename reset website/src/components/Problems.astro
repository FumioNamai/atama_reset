---
const problems = [
  "頭痛、頭が重い",
  "首や肩のコリ",
  "疲れ目、ドライアイ",
  "眠りが浅い",
  "すぐに疲れる",
  "疲れが取れない",
  "やる気が出ない",
  "うっかりミスが多い",
  "集中力・記憶力が低下した",
  "ストレスが多い",
  "イライラする",
  "手足が冷える",
  "食欲不振",
];
---

<section>
  <div class="grid-container">
  <div class="problems">
    <h3>こんなお悩みございませんか？</h3>
    <div class="wrapper">
      <ul>
        {
          problems.map((problem) => (
            <li class="list">
              <img
                src="/checked.svg"
                alt="チェック"
                width="14px"
                height="15px"
              />
              {problem}
            </li>
          ))
        }
      </ul>
      <div class="problems-image"></div>
    </div>
  </div>

  <div class="suggestion">
    <div class="suggestion-image"></div>
    <div class="text-wrapper">
      <p>
        あなたのお悩み<br />「脳疲労」による<br /><span class="highlight"
          >自律神経のしわざ</span
        >かも･･･
      </p>
      <p>
        疲れた頭や体を<br />究極の癒しで<span class="primary">リセット</span
        >しませんか
      </p>
    </div>
  </div>
  </div>

  <div class="cause">
      <p class="text-1 fadeinText">「眠い」「疲れた」「飽きた」</p>
      <p class="text-2 fadeinText">それは<span class="bold">『 脳疲労 』</span>のサイン</p>
      <div class="cause-image"></div>
      <p class="text-3 fadeinText">脳の疲労が脳を「酸化」させ</p>
      <div class="icon fadeinText"></div>
      <p class="text-4 fadeinText">脳が誤作動を起こし</p>
      <div class="icon fadeinText"></div>
      <p class="text-5 fadeinText">疲れていない体が疲労感を感じる</p>
      <p class="text-6 fadeinText">自律神経の乱れを引き起こし<br>体のあらゆる部分に不調が出ます</p>
      <p class="text-7 fadeinText highlight">原因不明の体の不調のほとんどが<br>自律神経の乱れによるものです</p>
  </div>
</section>

<style>
  section {
    padding-block: 24rem;
  }

  .problems {
    display: flex;
    justify-content: center;
    flex-direction: column;
    gap: 2.4rem;
    max-width: 512px;
    overflow: hidden;
    padding-block: 24px;
    margin: 0 auto;
  }
  h3 {
    font-weight: normal;
    text-align: center;
  }
  .wrapper {
    position: relative;
  }

  .problems-image {
    position: absolute;
    z-index: -10;
    top: 10%;
    left: 40%;
    width: 100%;
    height: 80%;
    background-position: top;
    background-size: cover;
    background-repeat: no-repeat;
    background-image: url(../assets/problem.jpg);
    border-radius: 16px 0 0 16px;
    filter: blur(1px);
    opacity: 0;
    transition: 2s .5s;
  }

  ul {
    padding-left: 2.4rem;
  }

  li {
    opacity: 0;
    font-size: 1.6rem;
    line-height: 200%;
    list-style: none;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  li > img {
    padding-top: 4px;
  }

  .fadein {
    opacity: 0;
    width: 100%;
    animation: fadein 1s forwards linear;
    animation-iteration-count: 1;
  }
  .fadein:nth-child(1) {
    animation-delay: 0.1s;
  }
  .fadein:nth-child(2) {
    animation-delay: 0.2s;
  }
  .fadein:nth-child(3) {
    animation-delay: 0.3s;
  }
  .fadein:nth-child(4) {
    animation-delay: 0.4s;
  }
  .fadein:nth-child(5) {
    animation-delay: 0.5s;
  }
  .fadein:nth-child(6) {
    animation-delay: 0.6s;
  }
  .fadein:nth-child(7) {
    animation-delay: 0.7s;
  }
  .fadein:nth-child(8) {
    animation-delay: 0.8s;
  }
  .fadein:nth-child(9) {
    animation-delay: 0.9s;
  }
  .fadein:nth-child(10) {
    animation-delay: 1s;
  }
  .fadein:nth-child(11) {
    animation-delay: 1.1s;
  }
  .fadein:nth-child(12) {
    animation-delay: 1.2s;
  }
  .fadein:nth-child(13) {
    animation-delay: 1.3s;
  }

  .suggestion {
    position: relative;
    max-width: 482px;
    max-height: 622px;
    padding: 16px;
    margin: 0 auto;
    transform: translateY();
  }

  .suggestion-image {
    width: auto;
    max-width: 482px;
    min-width: 343px;
    background-image: url(../assets/stiffneck1.jpg);
    background-repeat: no-repeat;
    background-size: cover;
    background-position: 20% 40%;
    border-radius: 16px;
    /* aspect-ratio: 482 / 412; */
    filter: blur(1px);
    transform: translateY(20px);
    transition: 2s;
    opacity: 0;
  }
  .suggestion-image::before {
    content: "";
    display: block;
    width: 100%;
    padding-top: 85.48%;
  }
  .text-wrapper {
    position: absolute;
    top: 10%;
    left: 8%;
    width: 328px;
    height: 291px;
    opacity: 0;
    transform: translateY(20px);
    transition: 3s;
  }

  .suggestion p {
    font-size: 2rem;
    line-height: 175%;
    padding-inline-start: 16px;
    padding-block: 28px;
  }

  .highlight {
    color: var(--highlight);
  }

  .primary {
    color: var(--primary);
    font-weight: bold;
  }

  @media screen and (900px <= width) {
    .grid-container {
      width: 900px;
      height: 700px;
      margin: 0 auto;
      position: relative;
    }
    .problems {
      width: 512px;
      position: absolute;
      top: 0;
      left: 0;
    }
    .suggestion {
      width: 512px;
      z-index: 10;
      position: absolute;
      top: 45%;
      left: 45%;
    }

    /* 表示が崩れてしまうため不採用 */
    /* .grid-container {
      margin: 0 auto;
      display: grid;
      width: 900px;
      grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
      grid-template-rows: repeat(3,240px);
    }
    .problems {
      grid-column: 1 / 5;
      grid-row: 1 / 3;
    }
    .suggestion {
      grid-column: 4 / 8;
      grid-row: 2 / 4;
    } */
  }

  .cause {
    text-align: center;
    max-width: 1024px;
    margin: 40px auto 0 auto;
    padding-block: 2.4rem;
  }

  .cause-image {
    max-width: 1024px;
    background-image: url(../assets/yawning.webp);
    background-repeat: no-repeat;
    background-size: cover;
    background-position: 50% 75%;
    aspect-ratio: 375/128;
    /* 画面幅が900pxを超えたらより細くする必要あり */
    opacity: 0;
    transition: 2s;
  }
  /* .cause-image::before {
    contain: "";
    display: block;
    width: 100%;
    padding-top: 34%;
  } */

  .cause p {
    letter-spacing: 3px;
  }

  .fadeinText {
    opacity: 0;
    transition: 2s;
    filter:drop-shadow(1px 2px 8px rgba(0, 0, 0, 0.5))
  }

  .fadeinText:last-child {
    filter:drop-shadow(1px 2px 8px rgb(246, 187, 98, 0.6));
    letter-spacing: 3px;
  }

  .text-1 {
    font-size: 2rem;
    font-weight: bold;
  }

  .text-2 {
    font-size: 1.8rem;
    margin-bottom: 1.6rem;
  }

  .bold {
    font-size: 2.4rem;
    font-weight: bold;
  }

  .icon {
    margin: 0 auto;
    width: 24px;
    height: 24px;
    background-image: url(/arrow-down.svg);
    background-repeat: no-repeat;
    background-size: contain;
  }
  .text-3 {
    margin-block: 1.6rem ;
  }
  .text-4 {
    margin-block: 1.6rem;
  }
  .text-5 {
    margin-block-start: 1.6rem;
    margin-block-end: 4rem;
  }
  .text-6 {
    margin-block-end: 4rem;
  }
  .text-7 {
    font-size: 2rem;
    font-weight: bold;
  }

</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    class ScrollObserver {
      constructor(els, cb, options) {
        //監視対象のelementsを取得
        this.els = document.querySelectorAll(els);
        //オプションのデフォルト設定を定義
        const defaultOptions = {
          root: null,
          rootMargin: "0px",
          threshold: 0,
        };
        this.cb = cb;
        //デフォルト設定に、個別設定のオプションをマージする
        this.options = Object.assign(defaultOptions, options);
        //
        this._init();
      }
      _init() {
        const callback = (entries) => {
          entries.forEach((entry) => {
            //監視対象の要素が領域内に入った場合の処理
            if (entry.isIntersecting) {
              this.cb(entry.target, true); //true=isIntersectingがtrue
              //処理後に監視を切る処理
              observer.unobserve(entry.target);
            }
            // else {
            //   this.cb(entry.target, false);
            // }
          });
        };
        const observer = new IntersectionObserver(callback.bind(this), this.options);
        //対象の要素elを監視
        this.els.forEach(el => observer.observe(el));
      }
    }

    //Problemパート
    const cb1 = function (el, isIntersecting) {
      if (isIntersecting) {
        //監視対象elとアニメーション対象が異なるため,elを使わずに要素を個別に取得
        const lists = [...document.querySelectorAll(".list")];
        const problemsImage = document.querySelector(".problems-image");
        lists.map((list) => {
          list.classList.add("fadein");
        });
        problemsImage.style.opacity = 0.6;
      }
    };
    //ScrollObserverの初期化(第1引数"entry.target",第2引数コールバック関数、第3引数オプションの個別設定)
    const problems = new ScrollObserver(".problems", cb1, {
      rootMargin: "-50px 0px",
      threshold: 0.5,
    });

    //Suggestionパート
    const cb2 = function (el, isIntersecting) {
      if (isIntersecting) {
        const suggestionImage = document.querySelector(".suggestion-image");
        const textWrapper = document.querySelector(".text-wrapper");
        suggestionImage.style.opacity = 0.6;
        suggestionImage.style.transform = "translateY(-20px)";
        textWrapper.style.opacity = 1;
        textWrapper.style.transform = "translateY(-20px)";
      }
    };
    const suggestion = new ScrollObserver(".suggestion", cb2, {
      rootMargin: "-50px 0px",
      threshold: 0.5,
    });


    //Causeパート
    const causeImg = function (el, isIntersecting) {
      if (isIntersecting) {
        //監視対象=アニメーション対象なのでelを使用
        el.style.opacity = 0.6;
      }
    };
    const causImage = new ScrollObserver(".cause-image", causeImg, {
      threshold: 1,
    });

    const textFading = function (el, isIntersecting) {
      if (isIntersecting) {
        el.style.opacity = 1;
      }
    };
    const fadeinText = new ScrollObserver(".fadeinText",  textFading, {
      rootMargin: '-30% 0px',
      threshold: 0,
    });
  });
</script>
