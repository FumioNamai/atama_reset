---
import Hamburger2 from "@components/Hamburger2.astro";
---
<div class="navbarTrigger"></div> <!-- IntersectionObserverのトリガーポイントとして設定 -->
<nav class="navbar is-inactive">
  <a href="/">
    <img src="/blog.svg" alt="">
    <p>ブログ</p>
  </a>

  <a href="/">
    <img src="/menu.svg" alt="">
    <p>メニュー</p>
  </a>

  <a href="/">
    <img src="/mail.svg" alt="">
    <p>お問い合わせ</p>
  </a>
    <Hamburger2 />
</nav>


<style>
  body {
    position: relative;
  }
  .navbarTrigger {
    position: absolute;
    top: 0px;
    height: 60px;
    width: 100%;
  }

  .navbar {
    display: flex;
    background: rgba(84, 105, 158, 0.95);
    width: 100%;
    height: 60px;
    position: fixed;
    bottom: 0px;
    left: 0;
    display: flex;
    flex-direction: row;
    justify-content: space-evenly;
    z-index: 100;
  }

  .is-inactive {
    transition: 1s;
    transform: translateY(60px);
  }

  .is-active{
    transition: 1s;
    transform: translateY(0px);
  }

  a {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 4px;
    width: 60px;
    text-decoration: none;
  }

  a:nth-child(1) {
    margin-top: 2px; /* 微調整 */
  }

  a:nth-child(2) {
    margin-top: 3px; /* 微調整 */
  }

  p {
    color: var(--textWhite);
    font-family: 'Noto Sans JP', sans-serif;
    font-size: 1rem;
  }

  @media screen and (768px <= width) {
    .navbar {
      display: none;
    }
  }

</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    class ScrollObserver {
      constructor(els, cb, options) {
        //監視対象のelementsを取得
        this.els = document.querySelectorAll(els);
        //オプションのデフォルト設定を定義
        const defaultOptions = {
          root: null,
          rootMargin: "0px",
          threshold: 0,
        };
        this.cb = cb;
        //デフォルト設定に、個別設定のオプションをマージする
        this.options = Object.assign(defaultOptions, options);
        //
        this._init();
      }
      _init() {
        const callback = (entries) => {
          entries.forEach((entry) => {
            //監視対象の要素が領域内に入った場合の処理
            if (entry.isIntersecting) {
              this.cb(entry.target, true)
            } else {
              this.cb(entry.target, false); //true=isIntersectingがfaulse
              //処理後に監視を切る処理
              // observer.unobserve(entry.target);
            }
          });
        };
        const observer = new IntersectionObserver(
          callback.bind(this),
          this.options
        );
        //対象の要素elを監視
        this.els.forEach((el) => observer.observe(el));
      }
    }

    const rising = function(el, isIntersecting) {
      if(isIntersecting) {
        const navbar = document.querySelector(".navbar")
        navbar.classList.remove("is-active")
        navbar.classList.add("is-inactive")
      }else {
        const navbar = document.querySelector(".navbar")
        navbar.classList.remove("is-inactive")
        navbar.classList.add("is-active")
      }
    }

    const navbarTrigger = new ScrollObserver(".navbarTrigger", rising , null)

  })
</script>
